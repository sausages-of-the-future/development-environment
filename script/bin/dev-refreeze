#!/usr/bin/env bash
jq --version foo >/dev/null 2>&1 || { echo >&2 "I require 'jq' but it's not installed.  Aborting."; exit 1; }
curl --version foo >/dev/null 2>&1 || { echo >&2 "I require 'curl' but it's not installed.  Aborting."; exit 1; }
DEBUG=false
# run this script from Vagrant or local, but croak if something's awry.
# dirname will be /vagrant/script/bin if on vagrant,
#+ and /home/whoami/code/landreg-devenv/script/bin if on local (as an example).
ROOT=$(dirname $0)/../..
$DEBUG && echo "Dev env root: $ROOT"
APPS=$ROOT/apps
[[ -d $APPS ]] || ( echo "apps dir $APPS not found relative to $0" ; exit 1 )
PKG_META_CACHE=${1:-$(mktemp -d -t pkgmeta.XXXXXX)}
TMP_WORKSPACE=$(mktemp -d -t requirements.XXXXXX)

$DEBUG && echo "Apps defined in: $ROOT/config/apps"
for app_and_port in $(cat $ROOT/config/apps | grep -v \# | grep -v '^\s*$') ; do
  app=$(echo -n ${app_and_port} | cut -d':' -f1)
  $DEBUG && echo "app: $app"
  for _DEPFILE in requirements.txt requirements_test.txt ; do
    DEPFILE=$APPS/$app/$_DEPFILE
    TMP_DEPFILE=$TMP_WORKSPACE/${app}.${_DEPFILE}
    if [ -e $DEPFILE ] ; then
      $DEBUG && echo "dependency file: $DEPFILE"
      while IFS='' read -r DEPENDENCY || [ -n "$DEPENDENCY" ]; do 
        $DEBUG && echo ">> DEP=[$DEPENDENCY]"
        echo "$DEPENDENCY" | grep -q "^#"
        if [[ ($? == 0) || (-z "$DEPENDENCY") ]] ; then
          $DEBUG && echo "Skipping invalid dep: $DEPENDENCY"
        else
          if [[ $DEPENDENCY == *-e\ * ]]; then
            echo "$DEPENDENCY" >> $TMP_DEPFILE
          else
            DEPENDENCY_NAME=$(echo -n $DEPENDENCY | cut -d'=' -f1)
            $DEBUG && echo ">>> NAME=[$DEPENDENCY_NAME]"
            DEP_META_JSON=$PKG_META_CACHE/$DEPENDENCY_NAME
            if [ ! -f $DEP_META_JSON ] ; then
              curl -s -o $DEP_META_JSON https://pypi.python.org/pypi/$DEPENDENCY_NAME/json >/dev/null
              $DEBUG && echo "Caching meta for $DEPENDENCY_NAME"
            fi
            $DEBUG && echo ">>>> META_FILE=[$DEP_META_JSON]"
            VERSION=$(cat $DEP_META_JSON | jq -r '.info.version')
            if [ $? != 0 ]; then
              echo "Error parsing jq .info.version in $DEP_META_JSON"
            fi
            $DEBUG && echo ">>>>> $DEPENDENCY_NAME==$VERSION"
            echo "$DEPENDENCY_NAME==$VERSION" >> $TMP_DEPFILE
          fi
        fi
      done < $DEPFILE
      $DEBUG && echo "$TMP_DEPFILE"
      cp $TMP_DEPFILE $DEPFILE
    fi
  done
  $DEBUG && echo
done

echo "Workspace: $TMP_WORKSPACE"
echo "Used cached dependency metadata in $PKG_META_CACHE"
echo "Re-run with: $0 $PKG_META_CACHE"
echo
echo "All dependencies updated. Run all tests before committing/pushing."
